# Generated by Django 5.1.4 on 2025-03-04 16:14

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models
from config.core.seeds.users import data
from django.contrib.auth.hashers import make_password

class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]
    
    def insert_init_data(apps, schema_editor):
        
        Person = apps.get_model('auth_module', 'Person')
        User = apps.get_model('auth_module', 'User')
        
        for i, user in enumerate(data):
            
            if i == 0:
                User.objects.create(
                    username=user['email'].split('@')[0],
                    email=user['email'],
                    password=make_password('123456'),
                    is_superuser=True,
                    is_staff=True
                )
                continue
            
            person = Person.objects.create(**user)
            
            User.objects.create(
                username=user['email'].split('@')[0],
                email=user['email'],
                person=person,
                password=make_password('123456')
            )
    
    def undo_insert_data(apps, schema_editor):
        Person = apps.get_model('auth_module', 'Person')
        User = apps.get_model('auth_module', 'User')
        
        Person.objects.all().delete()
        User.objects.all().delete()

    operations = [
        migrations.CreateModel(
            name='LogBase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status_code', models.IntegerField()),
                ('message', models.TextField()),
                ('stack_trace', models.TextField(blank=True, null=True)),
                ('request_path', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'log_base',
                'verbose_name_plural': 'log_base',
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('createdAt', models.DateField(auto_now_add=True, null=True)),
                ('updateAt', models.DateField(auto_now=True, null=True)),
                ('active', models.BooleanField(default=True)),
                ('fullname', models.CharField(default='', max_length=150)),
                ('email', models.EmailField(default='', max_length=254, verbose_name='email address')),
            ],
            options={
                'verbose_name': 'Persons',
                'verbose_name_plural': 'Persons',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('createdAt', models.DateField(auto_now_add=True, null=True)),
                ('updateAt', models.DateField(auto_now=True, null=True)),
                ('active', models.BooleanField(default=True)),
                ('username', models.CharField(max_length=256, unique=True)),
                ('password', models.CharField(max_length=100)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('person', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='auth_module.person')),
            ],
            options={
                'verbose_name': 'Users',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],  
        ),
        
        migrations.RunPython(
            insert_init_data, reverse_code=undo_insert_data, atomic=True
        ),
    ]
